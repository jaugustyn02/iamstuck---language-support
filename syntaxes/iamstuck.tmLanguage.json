{
	"$schema": "https://json.schemastore.org/vscode-tmLanguage",
	"name": "iamstuck",
	"scopeName": "source.stuck",
	"fileTypes": ["stuck"],
	"patterns": [
		{"include": "#comments"},
		{"include": "#keywords"},
		{"include": "#expressions"}
	],
	"repository": {
		"comments": {
			"patterns": [
				{"name": "comment.block.iamstuck", "include": "#comment-block"},
				{"name": "comment.block.line.double-slash.iamstuck", "include": "#comment-line"}
			]
		},
		"comment-block": {"begin": "/\\*", "end": "\\*/"},
		"comment-line": {"match": "//.*$"},
		"keywords": {
			"patterns": [
				{"include": "#control-keywords"},
				{"include": "#operator-keywords"},
				{"include": "#data-type"},
				{"include": "#container-type"}
			]
		},
		"expressions": {
			"patterns": [
				{"include": "#operators"},
				{"include": "#identifiers"},
				{"include": "#constants"}
			]
		},
		"constants": {
			"patterns": [
				{"include": "#integer-literal"},
				{"include": "#floating-point-literal"},
				{"include": "#char-literal"},
				{"include": "#string-literal"},
				{"include": "#bool-literal"},
				{"include": "#null-literal"}
			]
		},
		"operator-keywords": {"patterns": [{"name": "keyword.other.iamstuck", "match": "\\b(?:END|DEF)\\b"}]},
		"control-keywords": {"patterns": [{"name": "keyword.control.iamstuck", "match": "\\b(?:IF|ELSE|ELIF|WHILE|FOR|PRINT|PRINTLN|PRINTF|IN|RANGE|RETURN|PASS)\\b"}]},
		"integer-literal": {"name": "constant.numeric.iamstuck", "match": "\\b(?:-?[0-9]+)\\b"},
		"floating-point-literal": {"name": "constant.numeric.iamstuck", "match": "\\b(?:-?[0-9]+\\.[0-9]+)\\b"},
		"char-literal": {"name": "constant.character.iamstuck", "match": "'[^']*'"},
		"string-literal": {"name": "string.quoted.double.iamstuck", "begin": "\"", "end": "\"", "patterns": [{"include": "#escape-sequence"}]},
		"escape-sequence": {"patterns": [{"name": "constant.character.escape.iamstuck", "match": "\\\\."}]},
		"bool-literal": {"name": "constant.language.iamstuck", "match": "\\b(?:true|false)\\b"},
		"null-literal": {"name": "constant.language.iamstuck", "match": "\\b(?:null)\\b"},
		"identifiers": {"patterns": [
			{"include": "#function-identifier"},
			{"include": "#variable-identifier"}
			]
		},
		"function-identifier": {"name": "entity.name.function.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\("},
		"variable-identifier": {"name": "variable.other.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b"},
		"operators": {"patterns": [{"include": "#assign-operators"}, {"include": "#arith-operators"}, {"include": "#comparators"}, {"include": "#logic-operator"} ]},
		"assign-operators": {"patterns": [{"name": "keyword.operator.assignment.iamstuck", "match": "\\b(?:=|\\+=|-=|\\*=|/=|%=?|\\+\\+|--|:=)\\b"}]},
		"arith-operators": {"patterns": [{"name": "keyword.operator.arithmetic.iamstuck", "match": "\\b(?:\\+|-|\\*|/|%)\\b"}]},
		"comparators": {"patterns": [{"name": "keyword.operator.arithmetic.iamstuck", "match": "\\b(?:==|!=|>|<|>=|<=)\\b"}]},
		"container-type": {"patterns": [{"name": "support.class", "match": "\\b(?:STACK|QUEUE|DEQUE)\\b"}]},
		"data-type": {"patterns": [{"name": "storage.type.iamstuck", "match": "\\b(?:int|double|char|string|bool|float|void)\\b"}]},
		"logic-operator": {"patterns": [{"name": "constant.language.iamstuck", "match": "\\b(?:AND|OR|NOT|XOR)\\b"}]}
	}	
}
