{
	"$schema": "https://json.schemastore.org/vscode-tmLanguage",
	"name": "iamstuck",
	"scopeName": "source.stuck",
	"fileTypes": ["stuck"],
	"patterns": [
	  {"include": "#comments"},
	  {"include": "#statements"},
	  {"include": "#expressions"}
	],
	"repository": {
	  "comments": {
		"patterns": [
		  {"include": "#comment-block"},
		  {"include": "#comment-line"}
		]
	  },
	  "comment-block": {"begin": "/\\*", "end": "\\*/"},
	  "comment-line": {"match": "//.*$"},
	  "statements": {
		"patterns": [
		  {"include": "#if-statements"},
		  {"include": "#loop-statements"},
		  {"include": "#print-statements"},
		  {"include": "#call-statements"},
		  {"include": "#rest-statements"}
		]
	  },
	  "if-statements": {
		"patterns": [
		  {"name": "keyword.control.iamstuck", "match": "\\b(?:IF|ELIF|ELSE)\\b"},
		  {"name": "keyword.operator.iamstuck", "match": "\\b:|\\?\\b"}
		]
	  },
	  "loop-statements": {
		"patterns": [
		  {"name": "keyword.control.iamstuck", "match": "\\b(?:WHILE|FOR)\\b"},
		  {"name": "keyword.operator.iamstuck", "match": "\\b:|IN\\b|END\\b"}
		]
	  },
	  "print-statements": {
		"patterns": [
		  {"name": "keyword.control.iamstuck", "match": "\\b(?:PRINT|PRINTLN|PRINTF)\\b"},
		  {"name": "keyword.operator.iamstuck", "match": "\\b\\(|\\)\\b"}
		]
	  },
	  "call-statements": {"patterns": [{"include": "#function-call"}, {"include": "#method-call"}]},
	  "function-call": {"patterns": [{"name": "support.function.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\(.*\\)\\b"}]},
	  "method-call": {"patterns": [{"name": "support.function.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\s*\\.\\s*[a-zA-Z_][a-zA-Z0-9_]*\\(.*\\)\\b"}]},
	  "rest-statements": {
		"patterns": [
		  {"name": "keyword.control.iamstuck", "match": "\\b(?:PASS|RETURN)\\b"},
		  {"include": "#variable-declaration"},
		  {"include": "#container-declaration"},
		  {"include": "#function-definition"}
		]
	  },
	  "variable-declaration": {
		"patterns": [
		  {"include": "#data-type"},
		  {"name": "variable.other.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b"},
		  {"name": "keyword.operator.iamstuck", "match": "\\b=\\b"}
		]
	  },
	  "container-declaration": {
		"patterns": [
		  {"include": "#container-type"},
		  {"include": "#data-type"},
		  {"name": "variable.other.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b"}
		]
	  },
	  "function-definition": {
		"patterns": [
		  {"name": "keyword.control.iamstuck", "match": "\\bDEF\\b"},
		  {"include": "#data-type"},
		  {"name": "entity.name.function.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b"},
		  {"name": "keyword.operator.iamstuck", "match": "\\b\\(|:\\b|END\\b"},
		  {"include": "#statements"}
		]
	  },
	  "expressions": {"patterns": [{"include": "#constants"}, {"include": "#identifiers"}, {"include": "#operators"}]},
	  "constants": {"patterns": [
		  {"include": "#integer-literal"},
		  {"include": "#floating-point-literal"},
		  {"include": "#char-literal"},
		  {"include": "#string-literal"},
		  {"include": "#bool-literal"},
		  {"include": "#null-literal"}
		]
	  },
	  "integer-literal": {"name": "constant.numeric.iamstuck", "match": "\\b(?:-?[0-9]+)\\b"},
	  "floating-point-literal": {"name": "constant.numeric.iamstuck", "match": "\\b(?:-?[0-9]+\\.[0-9]+)\\b"},
	  "char-literal": {"name": "constant.character.iamstuck", "match": "'.'"},
	  "string-literal": {"name": "string.quoted.double.iamstuck", "begin": "\"", "end": "\"", "patterns": [{"include": "#escape-sequence"}]},
	  "escape-sequence": {"patterns": [{"name": "constant.character.escape.iamstuck", "match": "\\\\."}]},
	  "bool-literal": {"name": "constant.language.iamstuck", "match": "\\b(?:true|false)\\b"},
	  "null-literal": {"name": "constant.language.iamstuck", "match": "\\b(?:null)\\b"},
	  "identifiers": {"patterns": [{"include": "#variable-identifier"}, {"include": "#function-identifier"}]},
	  "variable-identifier": {"name": "variable.other.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b"},
	  "function-identifier": {"name": "entity.name.function.iamstuck", "match": "\\b(?:[a-zA-Z_][a-zA-Z0-9_]*)\\b"},
	  "operators": {"patterns": [{"include": "#assign-operators"}, {"include": "#arith-operators"}, {"include": "#comparators"}]},
	  "assign-operators": {"patterns": [{"name": "keyword.operator.assignment.iamstuck", "match": "\\b(?:=|\\+=|-=|\\*=|/=|%=?|\\+\\+|--|:=)\\b"}]},
	  "arith-operators": {"patterns": [{"name": "keyword.operator.arithmetic.iamstuck", "match": "\\b(?:\\+|-|\\*|/|%)\\b"}]},
	  "comparators": {"patterns": [{"name": "keyword.operator.comparison.iamstuck", "match": "\\b(?:==|!=|>|<|>=|<=)\\b"}]},
	  "container-type": {"patterns": [{"name": "storage.type.iamstuck", "match": "\\b(?:STACK|QUEUE|DEQUE)\\b"}]},
	  "data-type": {"patterns": [{"name": "storage.type.iamstuck", "match": "\\b(?:int|double|char|string|bool|float|void|STACK|QUEUE|DEQUE)\\b"}]}
	}
  }
  